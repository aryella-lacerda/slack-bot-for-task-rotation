service: slack-bot-for-task-rotation
frameworkVersion: '2 || 3'

custom:
  tableName: 'rotations-${sls:stage}'
  dynamodb:
    # Accepted stages must be whitelisted for DynamoDB Local
    stages:
      - staging
      - development
    start:
      port: 8001
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: 'rotations-${sls:stage}'
            sources: [./.seeds/rotations.json]
  stages:
    - development
    - staging
    - production

plugins:
  - serverless-plugin-typescript
  - serverless-tscpaths
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-stage-manager

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [RotationsTable, Arn]
  environment:
    ROTATIONS_TABLE: ${self:custom.tableName}
    IS_OFFLINE: true

functions:
  createRotation:
    handler: src/handlers/create-rotation/index.handler
    events:
      - http:
          path: slack/events/rotations/create
          method: post

  listRotations:
    handler: src/handlers/list-rotations/index.handler
    events:
      - http:
          path: slack/events/rotations/list
          method: post

  deleteRotation:
    handler: src/handlers/delete-rotation/index.handler
    events:
      - http:
          path: slack/events/rotations/delete
          method: post

  rotate:
    handler: src/handlers/rotate/index.handler
    events:
      - http:
          path: slack/events/rotations/rotate
          method: post

  executeRotations:
    handler: src/handlers/execute-rotations/index.handler
    events:
      - schedule: cron(0 12 ? * MON-FRI *)

resources:
  Resources:
    RotationsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: next_rotation_at
            AttributeType: S
          - AttributeName: channel_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: next_rotation_at
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: 'ByChannelId'
            KeySchema:
              - AttributeName: 'channel_id'
                KeyType: 'HASH'
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
